{"name":"GrEP","tagline":"Dual-Core Processor's OPLS15 Project, the Graph-ical Emulation Program","body":"##Authors\r\nOur team, Dual-Core Processors, consists of Michael Forsyth, Nicholas Forsyth, and Emily Seto.\r\n\r\n\r\n##Overview\r\nIn our earlier discussions, we began thinking about how there needs to be a simpler way for individuals with non-technical backgrounds to utilize the capabilities of plotting mathematical functions. Our software will provide this solution.\r\n\r\n\r\n##Screenshots\r\n![screenshot new gui](gui1.png)\r\n>This is how the **gui frame** first looks when the software starts up.\r\n\r\n![screenshot filled gui](gui.png)\r\n>This is how the same window looks after inputting lower and upper bounds for the x-, y-coordinates on a Cartesian plane. **Note that this particular part is still in development.** For now, all function inputs must be written in the form of a **lambda**, as shown above.\r\n\r\n![screenshot new plot](plot.png)\r\n>This is the new plot created with the given user input.\r\n\r\n*Note:* The gui will appear different depending on operating systems.\r\n\r\n\r\n\r\n##Concepts Demonstrated\r\n* Our use of racket/gui included **object-orientation** when we designed the frame and panels.\r\n* **Data abstraction** is used to ascertain user input from the gui.\r\n* The concept of **higher-order procedures** is represented by the simpler procedures written in our software.\r\n* **Symbol manipulation** utilized Racket reader to simplify input by using *eval*.\r\n\r\n\r\n##External Technology and Libraries\r\nFor this project, we used the following libraries:\r\n* **racket/gui/base** (http://docs.racket-lang.org/gui/)\r\n* **plot** (http://docs.racket-lang.org/plot/)\r\n\r\nRacket's **gui** library provides the classes and procedures that allowed us to create a graphical user interface. Our team used **gui** to create a new frame (a window), a horizontal panel within that frame, and used a few different widgets to attain user input (such as the button and text-field widgets). \r\n\r\n\r\nThe **plot** library allows us to produce any plot (or graph) we desire. From the user input we ascertained from **gui**, our team was able to plot that information to create graphs desired by the user.\r\n\r\n\r\n##Favorite Lines of Code\r\n####Michael Forsyth (@mike01720)\r\nMy favorite line is the eval read... that I used to read in the input. I like it because it utilizes a bunch of procedures that result in the expected net result. This follows the theory of functional code to let smaller procedures do the work for you.\r\n\r\n```scheme\r\n(function (eval (read (open-input-string (send i-func1 get-value)))) #:color 0 #:style 'dot)\r\n```\r\n\r\n\r\n####Nicholas Forsyth (@nick01720)\r\nI would say my favorite line of code would be the initial creation of the window frame that creates a sandbox area for gui. From that one line, the gui framework is started and anything can be created from it. It's a simple building block that sets the foundation for many more.\r\n\r\n```scheme\r\n(define frame (new frame%\r\n                   (label \"Graphic-al Emulation Program (GrEP)\")\r\n                   (height 150)\r\n                   (width 350)))\r\n```\r\n\r\n\r\n####Emily Seto (@svnaptic)\r\nMy favorite lines of code are the ones that capture the values inputted at the text-fields (by defining them), and using those new bindings as parameters to other procedures. This exemplifies the concepts of creating simple functions and abstracting immutable data in higher-order procedures.\r\n\r\n```scheme\r\n             (define xmin (send i-xmin get-value))\r\n             (define xmax (send i-xmax get-value))\r\n             (define ymin (send i-ymin get-value))\r\n             (define ymax (send i-ymax get-value))\r\n             \r\n             \r\n             (eval (read (open-input-string xmin))) \r\n             (eval (read (open-input-string xmax))) \r\n             ...\r\n             (eval (read (open-input-string ymin))) \r\n             (eval (read (open-input-string ymax)))\r\n```\r\n\r\n\r\n#How to Download and Run\r\nThere are links at the top of this webpage for downloading this program.\r\n* Download .zip (https://github.com/oplS15projects/GrEP/zipball/master)\r\n* Download .tar.gz (https://github.com/oplS15projects/GrEP/tarball/master)\r\n\r\nDepending on which version you download, unzip or untar your download. There should be *gui.rkt* and *plot.rkt*. At this point in time, all of our usable code is in **plot.rkt**. Run that file in Dr. Racket, and a *gui window* should pop-up. Enter any mathematical function in pre-fix notation, all of it wrapped up in a nice little lambda, and fill out the consequent text-fields to your preference. Hit **enter**, and a new plot should appear!\r\n\r\n\r\nCurrently, our latest release is Milestone 2: (https://github.com/oplS15projects/GrEP/releases/tag/Milestone2)\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}